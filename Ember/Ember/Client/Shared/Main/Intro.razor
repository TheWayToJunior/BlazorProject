@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IJSRuntime JSRuntime
@inject IModalService Modal
@inject ILoginService  loginService

<div class="intro">
    <div class="filter"></div>
    <div class="banner" style=" background-image: url('@ImgSource')">
        <div class="banner-content">
            @ChildContent
            <AuthorizeView>
                <Authorized>
                    
                    <div class="banner-buttom">
                        <a class="btn btn-solid waves-effect" href="account" style="max-width:300px;">
                            <i class="material-icons icon">
                                supervisor_account
                            </i>
                            @*<span style="font-size: 11px; text-transform: none;">@userName</span>*@
                            Личный кабинет
                        </a>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="banner-buttom">
                        <a class="btn btn-solid waves-effect" href="javascript: void(0)"
                           @onclick="@(() => Modal.Show<Modal.Login>("Выполните вход"))">
                            <i class="material-icons icon">
                                supervisor_account
                            </i>
                            Личный кабинет
                        </a>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            <div class="scroll-indicator" @onclick="() => JSRuntime.ScrollToElementId(BodyId)">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string BodyId { get; set; }

    [Parameter]
    public string ImgSource { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    string userName;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if(state.User.Identity.IsAuthenticated)
            userName = state.User.Identity.Name;
    }
}
